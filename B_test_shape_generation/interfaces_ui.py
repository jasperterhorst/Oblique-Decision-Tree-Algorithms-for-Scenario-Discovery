"""
interfaces_ui.py

This module creates interactive interfaces using ipywidgets using the shapes generated by the generation functions in
 shape_generators.py.
It provides interfaces for:
  - 2D Radial Segment
  - 2D Barbell
  - 2D Sine Wave
  - 2D Star
  - 3D Saddle
  - 3D Radial Segment
  - 3D Barbell
  - 2D Rectangle

Each function returns a VBox widget that can be displayed in a Jupyter Notebook.
Data and images are saved in designated subfolders.
"""

import os
import ipywidgets as widgets
from ipywidgets import VBox
from B_test_shape_generation.shape_generators import (generate_2d_rectangle, generate_2d_radial_segment,
                                                      generate_2d_barbell, generate_2d_sine_wave, generate_2d_star,
                                                      generate_3d_radial_segment, generate_3d_barbell,
                                                      generate_3d_saddle)
from B_test_shape_generation.utils import plot_2d_shape, plot_3d_shape, save_data
from src.config.paths import SHAPES_DIR


# --------------------------------------------------------
# Helper Functions
# --------------------------------------------------------


def setup_interface(defaults, save_dir, shape_name, dimension="2D"):
    """
    Initialize default parameters and ensure save directory exists.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Path for saving _data.
      - shape_name: Name of the shape.
      - dimension: "2D" or "3D" to append to the save directory name.

    Returns:
      - Tuple: (updated defaults, save directory, output widget, shape name widget).
    """
    if save_dir is None:
        folder_name = f"{shape_name.lower().replace(' ', '_')}_{dimension.lower()}"
        save_dir = os.path.join(SHAPES_DIR, folder_name)
        os.makedirs(save_dir, exist_ok=True)

    output = widgets.Output()
    shape_name_widget = widgets.Text(value=shape_name, description="Shape Name")

    return defaults, save_dir, output, shape_name_widget


# Global caches for 2D and 3D sample points
global_sample_cache_2d = {}
global_sample_cache_3d = {}


def update_interface_2d(generate_function, shape_name, output, **kwargs):
    """
    Updates and plots a 2D shape interactively.
    Uses a global cache so that sample points are re-generated only if 'num_samples' changes.

    Parameters:
      - generate_function: Function to generate the shape.
      - shape_name: String, shape title.
      - output: IPython output widget.
      - kwargs: Shape parameters (must include 'num_samples').

    Returns:
      - df_x: DataFrame of sampled (x, y) points.
      - y: Binary classification array (1 = inside, 0 = outside).
      - samples: Raw sample points as a NumPy array.
    """
    global global_sample_cache_2d
    num_samples = kwargs.get('num_samples')
    # Check global cache: if cached num_samples matches, use cached samples.
    if global_sample_cache_2d.get('num_samples') == num_samples:
        kwargs['samples'] = global_sample_cache_2d.get('samples')
    else:
        kwargs['samples'] = None  # Force re-sampling

    df_x, y, samples = generate_function(**kwargs)
    # Update the global cache
    global_sample_cache_2d['num_samples'] = num_samples
    global_sample_cache_2d['samples'] = samples

    with output:
        output.clear_output()
        print(f"{shape_name}: {sum(y)} points inside out of {num_samples} samples.")
        plot_2d_shape(samples, y, title=f"2D {shape_name}")
    return df_x, y, samples


def update_interface_3d(generate_function, shape_name, output, **kwargs):
    """
    Updates and plots a 3D shape interactively.
    Uses a global cache so that sample points are re-generated only if 'num_samples' changes.

    Parameters:
      - generate_function: Function to generate the shape.
      - shape_name: String, shape title.
      - output: IPython output widget.
      - kwargs: Shape parameters (must include 'num_samples').

    Returns:
      - df_x: DataFrame of sampled (x, y, z) points.
      - y: Binary classification array (1 = inside, 0 = outside).
      - samples: Raw sample points as a NumPy array.
    """
    global global_sample_cache_3d
    num_samples = kwargs.get('num_samples')
    if global_sample_cache_3d.get('num_samples') == num_samples:
        kwargs['samples'] = global_sample_cache_3d.get('samples')
    else:
        kwargs['samples'] = None

    df_x, y, samples = generate_function(**kwargs)
    global_sample_cache_3d['num_samples'] = num_samples
    global_sample_cache_3d['samples'] = samples

    with output:
        output.clear_output()
        print(f"{shape_name}: {sum(y)} points inside out of {num_samples} samples.")
        plot_3d_shape(samples, y, title=f"3D {shape_name}")
    return df_x, y, samples


def save_interface_data(interactive_widget, shape_name, save_dir, output, dimension, note=""):
    """
    Saves the generated shape _data and image.

    Parameters:
      - interactive_widget: The interactive widget storing the latest result.
      - shape_name: String, shape title.
      - save_dir: Path to save _data.
      - output: IPython output widget.
      - dimension: "2D" or "3D".
      - note: String containing shape parameter settings (appears under the saved figure).
    """
    df_x, y, samples = interactive_widget.result
    file_prefix = shape_name.lower().replace(" ", "_") + f"_{dimension.lower()}"

    # Save Data
    save_data(df_x, y, file_prefix=file_prefix, save_dir=save_dir)

    # Save Figure with Settings Note
    image_path = os.path.join(save_dir, f"{file_prefix}.pdf")
    plot_function = plot_2d_shape if dimension == "2D" else plot_3d_shape
    plot_function(samples, y, title=f"{dimension} {shape_name}", save_path=image_path, note=note)

    with output:
        print(f"{dimension} {shape_name} _data and image saved successfully to: {save_dir}")


# --------------------------------------------------------
# 2D Interface Creator Functions
# --------------------------------------------------------


def create_2d_rectangle_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting a 2D rectangle's parameters,
    including its center.

    Parameters:
        defaults (dict, optional): Dictionary of default values.
        save_dir (str, optional): Directory path to save generated _data.

    Returns:
        VBox: Interactive UI for 2D rectangle generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "width": 0.5,  # Rectangle width
            "height": 0.5,  # Rectangle height
            "rotation": 45,
            "center_x": 0.5,  # X-coordinate of center
            "center_y": 0.5,  # Y-coordinate of center
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Rectangle", "2D")

    def update(num_samples, width, height, rotation, center_x, center_y, noise_inside, noise_outside):
        center = (center_x, center_y)
        return update_interface_2d(
            generate_function=generate_2d_rectangle,
            shape_name="Rectangle",
            output=output,
            num_samples=num_samples,
            center=center,
            ribs=(width, height),
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Constants for widget styling
    DESCRIPTION_WIDTH = '150px'
    TEXTBOX_WIDTH = '330px'
    SLIDER_WIDTH = '350px'

    shape_name_widget = widgets.Text(
        value="Rectangle",
        description="Shape Name",
        layout={'width': TEXTBOX_WIDTH},
        style={'description_width': DESCRIPTION_WIDTH}
    )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        width=widgets.FloatSlider(
            value=defaults["width"], min=0.1, max=1.0, step=0.05,
            description="Width",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        height=widgets.FloatSlider(
            value=defaults["height"], min=0.1, max=1.0, step=0.05,
            description="Height",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation=widgets.IntSlider(
            value=defaults["rotation"], min=0, max=360, step=5,
            description="Rotation (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        center_x=widgets.FloatSlider(
            value=defaults["center_x"], min=0.0, max=1.0, step=0.05,
            description="Center X",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        center_y=widgets.FloatSlider(
            value=defaults["center_y"], min=0.0, max=1.0, step=0.05,
            description="Center Y",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    save_button = widgets.Button(description="Save 2D Rectangle Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        # Retrieve the latest generated shape parameters
        _, _, _ = interactive_widget.result
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        width = widget_values.get("width", defaults["width"])
        height = widget_values.get("height", defaults["height"])
        rotation = widget_values.get("rotation", defaults["rotation"])
        center_x = widget_values.get("center_x", defaults["center_x"])
        center_y = widget_values.get("center_y", defaults["center_y"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        settings_note = (
            f"Samples: {num_samples}, "
            f"Width: {width:.2f}, "
            f"Height: {height:.2f}, "
            f"Rotation: {rotation}Â°, "
            f"Center: ({center_x:.2f}, {center_y:.2f}), "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        save_interface_data(interactive_widget, "Rectangle", save_dir, output, "2D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_2d_radial_segment_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting radial segment shape parameters in 2D.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 2D radial segment generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "arc_span_degrees": 300,
            "rotation": 90,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Setup interface and ensure save directory exists
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Radial Segment",
                                                                    "2D")

    # Define the function that updates the interactive plot
    def update(num_samples, outer_radius, inner_radius, arc_span_degrees, rotation, noise_inside, noise_outside):
        """
        Updates the displayed radial segment plot based on user input.
        """
        return update_interface_2d(
            generate_function=generate_2d_radial_segment,
            shape_name="Radial Segment",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            arc_span_degrees=arc_span_degrees,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'  # Space for descriptions
    TEXTBOX_WIDTH = '330px'  # Shape name text box width
    SLIDER_WIDTH = '350px'  # Wider sliders

    # Shape Name Text Box with Increased Width
    shape_name_widget = widgets.Text(
        value="Radial Segment",
        description="Shape Name",
        layout={'width': TEXTBOX_WIDTH},
        style={'description_width': DESCRIPTION_WIDTH}
    )

    # Interactive Widget with Wider Sliders
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        outer_radius=widgets.FloatSlider(
            value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
            description="Outer Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        inner_radius=widgets.FloatSlider(
            value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
            description="Inner Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        arc_span_degrees=widgets.IntSlider(
            value=defaults["arc_span_degrees"], min=0, max=360, step=5,
            description="Arc Span (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation=widgets.IntSlider(
            value=defaults["rotation"], min=0, max=360, step=5,
            description="Rotation (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH})
    )

    # Define the save button
    save_button = widgets.Button(description="Save 2D Radial Segment Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        """
        Handles saving the generated shape _data and image.
        Ensures the correct settings are saved with the figure.
        """
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Extract widget values safely to avoid key errors
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        outer_radius = widget_values.get("outer_radius", defaults["outer_radius"])
        inner_radius = widget_values.get("inner_radius", defaults["inner_radius"])
        arc_span_degrees = widget_values.get("arc_span_degrees", defaults["arc_span_degrees"])
        rotation = widget_values.get("rotation", defaults["rotation"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        # Ensure settings are displayed under the saved figure
        settings_note = (
            f"Samples: {num_samples}, "
            f"Outer Radius: {outer_radius:.2f}, "
            f"Inner Radius: {inner_radius:.2f}, "
            f"Arc Span: {arc_span_degrees}Â°, "
            f"Rotation: {rotation}Â°, "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        # Save _data and image, ensuring the settings note is passed correctly
        save_interface_data(interactive_widget, "Radial Segment", save_dir, output, "2D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_2d_barbell_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting barbell shape parameters in 2D.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 2D barbell generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "barbell_length": 0.6,
            "sphere_radius": 0.15,
            "connector_thickness": 0.04,
            "rotation": 50,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Setup interface and ensure save directory exists
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Barbell",
                                                                    "2D")

    # Define the function that updates the interactive plot
    def update(num_samples, barbell_length, sphere_radius, connector_thickness, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_barbell,
            shape_name="Barbell",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            barbell_length=barbell_length,
            sphere_radius=sphere_radius,
            connector_thickness=connector_thickness,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'  # Space for descriptions
    TEXTBOX_WIDTH = '330px'  # Shape name text box width
    SLIDER_WIDTH = '350px'  # Wider sliders

    # Adjust shape name input width
    shape_name_widget.layout.width = TEXTBOX_WIDTH
    shape_name_widget.style.description_width = DESCRIPTION_WIDTH

    # Define interactive widget controls
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        barbell_length=widgets.FloatSlider(
            value=defaults["barbell_length"], min=0.1, max=0.8, step=0.05,
            description="Barbell Length",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        sphere_radius=widgets.FloatSlider(
            value=defaults["sphere_radius"], min=0.05, max=0.3, step=0.01,
            description="Sphere Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        connector_thickness=widgets.FloatSlider(
            value=defaults["connector_thickness"], min=0.01, max=0.2, step=0.01,
            description="Connector Thickness",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation=widgets.IntSlider(
            value=defaults["rotation"], min=0, max=360, step=10,
            description="Rotation (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    # Define the save button
    save_button = widgets.Button(description="Save 2D Barbell Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        """
        Handles saving the generated shape _data and image.
        Ensures the correct settings are saved with the figure.
        """
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Extract widget values safely to avoid key errors
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        barbell_length = widget_values.get("barbell_length", defaults["barbell_length"])
        sphere_radius = widget_values.get("sphere_radius", defaults["sphere_radius"])
        connector_thickness = widget_values.get("connector_thickness", defaults["connector_thickness"])
        rotation = widget_values.get("rotation", defaults["rotation"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        # Ensure settings are displayed under the saved figure
        settings_note = (
            f"Samples: {num_samples}, "
            f"Barbell Length: {barbell_length:.2f}, "
            f"Sphere Radius: {sphere_radius:.2f}, "
            f"Connector Thickness: {connector_thickness:.2f}, "
            f"Rotation: {rotation}Â°, "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        # Save _data and image, ensuring the settings note is passed correctly
        save_interface_data(interactive_widget, "Barbell", save_dir, output, "2D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_2d_sine_wave_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting sine wave shape parameters in 2D.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 2D sine wave generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "x_range": (0.1, 0.9),
            "vertical_offset": 0.5,
            "amplitude": 0.2,
            "frequency": 0.5,
            "thickness": 0.05,
            "rotation": 0,
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Setup interface and ensure save directory exists
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Sine Wave",
                                                                    "2D")

    # Define the function that updates the interactive plot
    def update(num_samples, x_min, x_max, vertical_offset, amplitude, frequency,
               thickness, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_sine_wave,
            shape_name="Sine Wave",
            output=output,
            num_samples=num_samples,
            x_range=(x_min, x_max),
            vertical_offset=vertical_offset,
            amplitude=amplitude,
            frequency=frequency,
            thickness=thickness,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'  # Space for descriptions
    TEXTBOX_WIDTH = '330px'  # Shape name text box width
    SLIDER_WIDTH = '350px'  # Wider sliders

    # Adjust shape name input width
    shape_name_widget.layout.width = TEXTBOX_WIDTH
    shape_name_widget.style.description_width = DESCRIPTION_WIDTH

    # Define interactive widget controls
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        x_min=widgets.FloatSlider(
            value=defaults["x_range"][0], min=0.0, max=0.5, step=0.05,
            description="X Min",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        x_max=widgets.FloatSlider(
            value=defaults["x_range"][1], min=0.5, max=1.0, step=0.05,
            description="X Max",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        vertical_offset=widgets.FloatSlider(
            value=defaults["vertical_offset"], min=0.0, max=1.0, step=0.05,
            description="Vertical Offset",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        amplitude=widgets.FloatSlider(
            value=defaults["amplitude"], min=0.0, max=0.5, step=0.05,
            description="Amplitude",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        frequency=widgets.FloatSlider(
            value=defaults["frequency"], min=0.5, max=5.0, step=0.5,
            description="Frequency",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        thickness=widgets.FloatSlider(
            value=defaults["thickness"], min=0.01, max=0.2, step=0.01,
            description="Thickness",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation=widgets.IntSlider(
            value=defaults["rotation"], min=0, max=360, step=5,
            description="Rotation (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    # Define the save button
    save_button = widgets.Button(description="Save 2D Sine Wave Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        """
        Handles saving the generated shape _data and image.
        """
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Extract widget values safely to avoid key errors
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        x_min = widget_values.get("x_min", defaults["x_range"][0])
        x_max = widget_values.get("x_max", defaults["x_range"][1])
        vertical_offset = widget_values.get("vertical_offset", defaults["vertical_offset"])
        amplitude = widget_values.get("amplitude", defaults["amplitude"])
        frequency = widget_values.get("frequency", defaults["frequency"])
        thickness = widget_values.get("thickness", defaults["thickness"])
        rotation = widget_values.get("rotation", defaults["rotation"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        # Ensure settings are displayed under the saved figure
        settings_note = (
            f"Samples: {num_samples}, "
            f"X Range: ({x_min:.2f}, {x_max:.2f}), "
            f"Vertical Offset: {vertical_offset:.2f}, "
            f"Amplitude: {amplitude:.2f}, "
            f"Frequency: {frequency:.2f}, "
            f"Thickness: {thickness:.2f}, "
            f"Rotation: {rotation}Â°, "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        # Save _data and image, ensuring the settings note is passed correctly
        save_interface_data(interactive_widget, "Sine Wave", save_dir, output, "2D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_2d_star_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting star shape parameters in 2D.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 2D star generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "num_points": 5,
            "star_size": 0.8,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "rotation": 0,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Setup interface and ensure save directory exists
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Star",
                                                                    "2D")

    # Define the function that updates the interactive plot
    def update(num_samples, num_points, star_size, outer_radius, inner_radius, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_star,
            shape_name="Star",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            num_points=num_points,
            star_size=star_size,
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'  # Space for descriptions
    TEXTBOX_WIDTH = '330px'  # Shape name text box width
    SLIDER_WIDTH = '350px'  # Wider sliders

    # Adjust shape name input width
    shape_name_widget.layout.width = TEXTBOX_WIDTH
    shape_name_widget.style.description_width = DESCRIPTION_WIDTH

    # Define interactive widget controls
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        num_points=widgets.IntSlider(
            value=defaults["num_points"], min=3, max=10, step=1,
            description="Points",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        star_size=widgets.FloatSlider(
            value=defaults["star_size"], min=0.5, max=1.5, step=0.05,
            description="Size",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        outer_radius=widgets.FloatSlider(
            value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
            description="Outer Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        inner_radius=widgets.FloatSlider(
            value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
            description="Inner Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(
            value=defaults["rotation"], min=0, max=360, step=10,
            description="Rotation (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    # Define the save button
    save_button = widgets.Button(description="Save 2D Star Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        """
        Handles saving the generated shape _data and image.
        """
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Pass a plain string since the formatting happens in the plot function
        settings_note = (
            f"Samples: {interactive_widget.kwargs['num_samples']}, "
            f"Points: {interactive_widget.kwargs['num_points']}, "
            f"Size: {interactive_widget.kwargs['star_size']:.2f}, "
            f"Outer: {interactive_widget.kwargs['outer_radius']:.2f}, "
            f"Inner: {interactive_widget.kwargs['inner_radius']:.2f}, "
            f"Rotation: {interactive_widget.kwargs['rotation']}Â°, "
            f"Noise: Inside {interactive_widget.kwargs['outer_radius']:.2f}, "
            f"Outside {interactive_widget.kwargs['outer_radius']:.2f}"
        )

        # Save _data and image
        save_interface_data(interactive_widget, "Star", save_dir, output, "2D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


# --------------------------------------------------------
# 3D Interface Creator Functions
# --------------------------------------------------------


def create_3d_radial_segment_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D radial segment shape parameters.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 3D radial segment generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "arc_span_degrees": 300,
            "rotation_x": 35,
            "rotation_y": 0,
            "rotation_z": 60,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Setup interface and ensure save directory exists
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Radial Segment",
                                                                    dimension="3D")

    # Define the function that updates the interactive plot
    def update(num_samples, outer_radius, inner_radius, arc_span_degrees,
               rotation_x, rotation_y, rotation_z, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_radial_segment,
            shape_name="Radial Segment",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            arc_span_degrees=arc_span_degrees,
            rotation_x=rotation_x,
            rotation_y=rotation_y,
            rotation_z=rotation_z,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'
    TEXTBOX_WIDTH = '330px'
    SLIDER_WIDTH = '350px'

    # Shape Name Text Box
    shape_name_widget = widgets.Text(
        value="Radial Segment",
        description="Shape Name",
        layout={'width': TEXTBOX_WIDTH},
        style={'description_width': DESCRIPTION_WIDTH}
    )

    # Interactive Widget
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        outer_radius=widgets.FloatSlider(
            value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
            description="Outer Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        inner_radius=widgets.FloatSlider(
            value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
            description="Inner Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        arc_span_degrees=widgets.IntSlider(
            value=defaults["arc_span_degrees"], min=0, max=360, step=5,
            description="Arc Span (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_x=widgets.IntSlider(
            value=defaults["rotation_x"], min=0, max=360, step=5,
            description="Rotation X (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_y=widgets.IntSlider(
            value=defaults["rotation_y"], min=0, max=360, step=5,
            description="Rotation Y (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_z=widgets.IntSlider(
            value=defaults["rotation_z"], min=0, max=360, step=5,
            description="Rotation Z (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )

    )

    # Save Button
    save_button = widgets.Button(description="Save 3D Radial Segment Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        """
        Handles saving the generated shape _data and image.
        Ensures the correct settings are saved with the figure.
        """
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Extract widget values safely to avoid key errors
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        outer_radius = widget_values.get("outer_radius", defaults["outer_radius"])
        inner_radius = widget_values.get("inner_radius", defaults["inner_radius"])
        arc_span_degrees = widget_values.get("arc_span_degrees", defaults["arc_span_degrees"])
        rotation_x = widget_values.get("rotation_x", defaults["rotation_x"])
        rotation_y = widget_values.get("rotation_y", defaults["rotation_y"])
        rotation_z = widget_values.get("rotation_z", defaults["rotation_z"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        # Ensure settings are displayed under the saved figure
        settings_note = (
            f"Samples: {num_samples}, "
            f"Outer Radius: {outer_radius:.2f}, "
            f"Inner Radius: {inner_radius:.2f}, "
            f"Arc Span: {arc_span_degrees}Â°, "
            f"Rotation: ({rotation_x}Â°, {rotation_y}Â°, {rotation_z}Â°), "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        # Save _data and image, ensuring the settings note is passed correctly
        save_interface_data(interactive_widget, "Radial Segment", save_dir, output, "3D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_3d_barbell_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D barbell shape parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "barbell_length": 0.8,
            "sphere_radius": 0.25,
            "connector_thickness": 0.1,
            "rotation_angle_x": 50,
            "rotation_angle_y": 50,
            "rotation_angle_z": 0,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Use helper function to set up interface
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Barbell",
                                                                    dimension="3D")

    # Define update function
    def update(num_samples, barbell_length, sphere_radius, connector_thickness,
               rotation_angle_x, rotation_angle_y, rotation_angle_z, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_barbell,
            shape_name="Barbell",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            barbell_length=barbell_length,
            sphere_radius=sphere_radius,
            connector_thickness=connector_thickness,
            rotation_angle_x=rotation_angle_x,
            rotation_angle_y=rotation_angle_y,
            rotation_angle_z=rotation_angle_z,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Define constants for styling
    DESCRIPTION_WIDTH = '150px'  # Space for descriptions
    TEXTBOX_WIDTH = '330px'  # Shape name text box width
    SLIDER_WIDTH = '350px'  # Wider sliders

    # Adjust shape name input width
    shape_name_widget.layout.width = TEXTBOX_WIDTH
    shape_name_widget.style.description_width = DESCRIPTION_WIDTH

    # Define interactive widget controls
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        barbell_length=widgets.FloatSlider(
            value=defaults["barbell_length"], min=0.1, max=0.8, step=0.05,
            description="Barbell Length",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        sphere_radius=widgets.FloatSlider(
            value=defaults["sphere_radius"], min=0.05, max=0.3, step=0.01,
            description="Sphere Radius",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        connector_thickness=widgets.FloatSlider(
            value=defaults["connector_thickness"], min=0.01, max=0.2, step=0.01,
            description="Connector Thickness",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_angle_x=widgets.IntSlider(
            value=defaults["rotation_angle_x"], min=0, max=360, step=10,
            description="Rotation X (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_angle_y=widgets.IntSlider(
            value=defaults["rotation_angle_y"], min=0, max=360, step=10,
            description="Rotation Y (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotation_angle_z=widgets.IntSlider(
            value=defaults["rotation_angle_z"], min=0, max=360, step=10,
            description="Rotation Z (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    # Define save button and callback
    save_button = widgets.Button(description="Save 3D Barbell Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        # Extract widget values safely to avoid key errors
        widget_values = interactive_widget.kwargs
        num_samples = widget_values.get("num_samples", defaults["num_samples"])
        barbell_length = widget_values.get("barbell_length", defaults["barbell_length"])
        sphere_radius = widget_values.get("sphere_radius", defaults["sphere_radius"])
        connector_thickness = widget_values.get("connector_thickness", defaults["connector_thickness"])
        rotation_angle_x = widget_values.get("rotation_angle_x", defaults["rotation_angle_x"])
        rotation_angle_y = widget_values.get("rotation_angle_y", defaults["rotation_angle_y"])
        rotation_angle_z = widget_values.get("rotation_angle_z", defaults["rotation_angle_z"])
        noise_inside = widget_values.get("noise_inside", defaults["noise_inside"])
        noise_outside = widget_values.get("noise_outside", defaults["noise_outside"])

        # Settings note to display under the saved figure
        settings_note = (
            f"Samples: {num_samples}, "
            f"Barbell Length: {barbell_length:.2f}, "
            f"Sphere Radius: {sphere_radius:.2f}, "
            f"Connector Thickness: {connector_thickness:.2f}, "
            f"Rotation: ({rotation_angle_x}Â°, {rotation_angle_y}Â°, {rotation_angle_z}Â°, "
            f"Noise: Inside {noise_inside:.2f}, Outside {noise_outside:.2f}"
        )

        # Save _data and image
        save_interface_data(interactive_widget, "Barbell", save_dir, output, "3D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])


def create_3d_saddle_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D saddle shape parameters.

    Parameters:
      - defaults: Dictionary of default values.
      - save_dir: Directory path to save generated _data.

    Returns:
      - VBox: Interactive UI for 3D saddle generation.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "saddle_height": 0.5,
            "curve_sharpness_x": 1.0,
            "curve_sharpness_y": 1.0,
            "surface_thickness": 0.1,
            "rotate_x_deg": 0,
            "rotate_y_deg": 0,
            "rotate_z_deg": 0,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }

    # Set up the interface (using â3Dâ as the dimension so the save folder gets the _3d suffix)
    defaults, save_dir, output, shape_name_widget = setup_interface(defaults, save_dir, "Saddle", dimension="3D")

    # Define the update function that passes the widget values to our generator function
    def update(num_samples, saddle_height, curve_sharpness_x, curve_sharpness_y,
               surface_thickness, rotate_x_deg, rotate_y_deg, rotate_z_deg, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_saddle,
            shape_name="Saddle",
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            saddle_height=saddle_height,
            curve_sharpness_x=curve_sharpness_x,
            curve_sharpness_y=curve_sharpness_y,
            surface_thickness=surface_thickness,
            rotate_x_deg=rotate_x_deg,
            rotate_y_deg=rotate_y_deg,
            rotate_z_deg=rotate_z_deg,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    # Constants for styling
    DESCRIPTION_WIDTH = '150px'
    TEXTBOX_WIDTH = '330px'
    SLIDER_WIDTH = '350px'

    # Adjust the shape name widget's appearance
    shape_name_widget.layout.width = TEXTBOX_WIDTH
    shape_name_widget.style.description_width = DESCRIPTION_WIDTH

    # Create the interactive widget with wider sliders
    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(
            value=defaults["num_samples"], min=500, max=20000, step=500,
            description="Samples",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        saddle_height=widgets.FloatSlider(
            value=defaults["saddle_height"], min=0.1, max=1.0, step=0.05,
            description="Height",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        curve_sharpness_x=widgets.FloatSlider(
            value=defaults["curve_sharpness_x"], min=0.1, max=2.0, step=0.1,
            description="Curve X",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        curve_sharpness_y=widgets.FloatSlider(
            value=defaults["curve_sharpness_y"], min=0.1, max=2.0, step=0.1,
            description="Curve Y",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        surface_thickness=widgets.FloatSlider(
            value=defaults["surface_thickness"], min=0.01, max=0.4, step=0.01,
            description="Thickness",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotate_x_deg=widgets.IntSlider(
            value=defaults["rotate_x_deg"], min=0, max=360, step=10,
            description="Rotation X (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotate_y_deg=widgets.IntSlider(
            value=defaults["rotate_y_deg"], min=0, max=360, step=10,
            description="Rotation Y (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        rotate_z_deg=widgets.IntSlider(
            value=defaults["rotate_z_deg"], min=0, max=360, step=10,
            description="Rotation Z (Â°)",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_inside=widgets.FloatSlider(
            value=defaults["noise_inside"], min=0.0, max=0.5, step=0.01,
            description="Noise Inside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        ),
        noise_outside=widgets.FloatSlider(
            value=defaults["noise_outside"], min=0.0, max=0.5, step=0.01,
            description="Noise Outside",
            style={'description_width': DESCRIPTION_WIDTH},
            layout={'width': SLIDER_WIDTH}
        )
    )

    # Create the save button and define its callback
    save_button = widgets.Button(description="Save 3D Saddle Data", button_style='success')

    # noinspection PyUnusedLocal
    def on_save_clicked(b):
        # Get the latest generated shape
        _, _, _ = interactive_widget.result

        settings_note = (
            f"Samples: {interactive_widget.kwargs['num_samples']}, "
            f"Height: {interactive_widget.kwargs['saddle_height']:.2f}, "
            f"Curvature: ({interactive_widget.kwargs['curve_sharpness_x']:.2f}, "
            f"{interactive_widget.kwargs['curve_sharpness_y']:.2f}), "
            f"Thickness: {interactive_widget.kwargs['surface_thickness']:.2f}, "
            f"Rotation: ({interactive_widget.kwargs['rotate_x_deg']}Â°, "
            f"{interactive_widget.kwargs['rotate_y_deg']}Â°, "
            f"{interactive_widget.kwargs['rotate_z_deg']}Â°, "
            f"Noise: Inside {interactive_widget.kwargs['noise_inside']:.2f}, "
            f"Outside {interactive_widget.kwargs['noise_outside']:.2f}"
        )

        # Save the generated _data and image using the helper function
        save_interface_data(interactive_widget, "Saddle", save_dir, output, "3D", note=settings_note)

    save_button.on_click(on_save_clicked)

    return VBox([shape_name_widget, interactive_widget, save_button, output])
