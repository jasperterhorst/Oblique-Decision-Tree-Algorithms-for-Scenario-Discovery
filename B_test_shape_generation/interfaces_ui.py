"""
interfaces_ui.py

This module creates interactive interfaces using ipywidgets and the shapes generated by the functions in
shape_generators.py.
It provides interfaces for:
  - 2D Rectangle
  - 2D Radial Segment
  - 2D Barbell
  - 2D Sine Wave
  - 2D Star
  - 3D Saddle
  - 3D Radial Segment
  - 3D Barbell

Each function returns a VBox widget that can be displayed in a Jupyter Notebook.
Data and images are saved in designated subfolders.
"""

import os
import ipywidgets as widgets
from ipywidgets import VBox
from B_test_shape_generation.shape_generators import (
    generate_2d_rectangle, generate_2d_radial_segment,
    generate_2d_barbell, generate_2d_sine_wave, generate_2d_star,
    generate_3d_radial_segment, generate_3d_barbell,
    generate_3d_saddle
)
from B_test_shape_generation.utils import plot_2d_shape, plot_3d_shape, save_data
from src.config.paths import SHAPES_DIR

# --------------------------------------------------------
# General Widget settings
# --------------------------------------------------------

DESCRIPTION_WIDTH = '150px'
TEXTBOX_WIDTH = '330px'
SLIDER_WIDTH = '350px'

global_sample_cache_2d = {}
global_sample_cache_3d = {}

# --------------------------------------------------------
# Helper Functions
# --------------------------------------------------------


def setup_interface(defaults, save_dir, base_name, dimension="2D"):
    """
    Compute the default save-directory path and create an output widget along with a single
    text widget for entering an appendable suffix.
    Folder creation is deferred until saving.

    Parameters:
        defaults (dict): Dictionary of default values.
        save_dir (str): Initial save-directory path (if None, it is computed).
        base_name (str): The base name for file naming (e.g., "rectangle_2d").
        dimension (str): "2D" or "3D".

    Returns:
        Tuple: (defaults, save_dir, output widget, suffix widget)
    """
    if save_dir is None:
        # Use the base_name as the default folder name.
        save_dir = os.path.join(SHAPES_DIR, base_name)
    output = widgets.Output()
    suffix_widget = widgets.Text(
        value="",
        description="Suffix",
        layout={'width': TEXTBOX_WIDTH},
        style={'description_width': DESCRIPTION_WIDTH}
    )
    return defaults, save_dir, output, suffix_widget


def update_interface_2d(generate_function, plot_title, output, **kwargs):
    """
    Updates and plots a 2D shape interactively.
    Uses a global cache so that sample points are re-generated only if 'num_samples' changes.
    plot_title is used solely for display.
    """
    global global_sample_cache_2d
    num_samples = kwargs.get('num_samples')
    if global_sample_cache_2d.get('num_samples') == num_samples:
        kwargs['samples'] = global_sample_cache_2d.get('samples')
    else:
        kwargs['samples'] = None

    df_x, y, samples = generate_function(**kwargs)
    global_sample_cache_2d['num_samples'] = num_samples
    global_sample_cache_2d['samples'] = samples

    with output:
        output.clear_output()
        print(f"{plot_title}: {sum(y)} points inside out of {num_samples} samples.")
        plot_2d_shape(samples, y, title=f"{plot_title}")
    return df_x, y, samples


def update_interface_3d(generate_function, plot_title, output, **kwargs):
    """
    Updates and plots a 3D shape interactively.
    Uses a global cache so that sample points are re-generated only if 'num_samples' changes.
    plot_title is used solely for display.
    """
    global global_sample_cache_3d
    num_samples = kwargs.get('num_samples')
    if global_sample_cache_3d.get('num_samples') == num_samples:
        kwargs['samples'] = global_sample_cache_3d.get('samples')
    else:
        kwargs['samples'] = None

    df_x, y, samples = generate_function(**kwargs)
    global_sample_cache_3d['num_samples'] = num_samples
    global_sample_cache_3d['samples'] = samples

    with output:
        output.clear_output()
        print(f"{plot_title}: {sum(y)} points inside out of {num_samples} samples.")
        plot_3d_shape(samples, y, title=f"3D {plot_title}")
    return df_x, y, samples


def save_interface_data(interactive_widget, file_prefix, plot_title, save_dir, output, dimension, note=""):
    """
    Saves the generated shape data and image.
    """
    df_x, y, samples = interactive_widget.result
    fp = file_prefix.lower().replace(" ", "_")
    # Save CSV files
    save_data(df_x, y, file_prefix=fp, save_dir=save_dir)
    # Save PDF figure
    image_path = os.path.join(save_dir, f"{fp}.pdf")
    plot_function = plot_2d_shape if dimension == "2D" else plot_3d_shape
    plot_function(samples, y, title=f"{dimension} {plot_title}", save_path=image_path, note=note)
    with output:
        print(f"{dimension} {plot_title} data and image saved successfully to: {save_dir}")


def handle_save(interactive_widget, file_prefix, plot_title, save_dir, output, dimension, defaults, param_list):
    """
    Extracts parameters, formats a settings note, and then saves the shape data and image.
    """
    _, _, _ = interactive_widget.result
    widget_values = interactive_widget.kwargs
    note_parts = []
    for param, label, fmt in param_list:
        value = widget_values.get(param, defaults.get(param))
        if isinstance(value, (tuple, list)):
            value_str = "(" + ", ".join(f"{v:.2f}" for v in value) + ")"
            note_parts.append(f"{label}: {value_str}")
        else:
            note_parts.append(f"{label}: {fmt.format(value)}")
    settings_note = ", ".join(note_parts)
    save_interface_data(interactive_widget, file_prefix, plot_title, save_dir, output, dimension, note=settings_note)


# --------------------------------------------------------
# 2D Interface Creator Functions
# --------------------------------------------------------


def create_2d_rectangle_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting a 2D rectangle's parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "width": 0.5,
            "height": 0.5,
            "rotation": 45,
            "center_x": 0.5,
            "center_y": 0.5,
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "rectangle_2d"    # for file naming
    plot_title = "Rectangle 2D"   # for display in plot
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "2D")

    def update(num_samples, width, height, rotation, center_x, center_y, noise_inside, noise_outside):
        center = (center_x, center_y)
        return update_interface_2d(
            generate_function=generate_2d_rectangle,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=center,
            ribs=(width, height),
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        width=widgets.FloatSlider(value=defaults["width"], min=0.1, max=1.0, step=0.05,
                                  description="Width", style={'description_width': DESCRIPTION_WIDTH},
                                  layout={'width': SLIDER_WIDTH}),
        height=widgets.FloatSlider(value=defaults["height"], min=0.1, max=1.0, step=0.05,
                                   description="Height", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(value=defaults["rotation"], min=0, max=360, step=5,
                                   description="Rotation (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        center_x=widgets.FloatSlider(value=defaults["center_x"], min=0.0, max=1.0, step=0.05,
                                     description="Center X", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        center_y=widgets.FloatSlider(value=defaults["center_y"], min=0.0, max=1.0, step=0.05,
                                     description="Center Y", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("width", "Width", "{:.2f}"),
            ("height", "Height", "{:.2f}"),
            ("rotation", "Rotation", "{}"),
            ("center_x", "Center X", "{:.2f}"),
            ("center_y", "Center Y", "{:.2f}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "2D", defaults, param_list)

    save_button = widgets.Button(description="Save 2D Rectangle Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_2d_radial_segment_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 2D radial segment parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "arc_span_degrees": 300,
            "rotation": 90,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "radial_segment_2d"
    plot_title = "Radial Segment 2D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "2D")

    def update(num_samples, outer_radius, inner_radius, arc_span_degrees, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_radial_segment,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            arc_span_degrees=arc_span_degrees,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        outer_radius=widgets.FloatSlider(value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
                                         description="Outer Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        inner_radius=widgets.FloatSlider(value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
                                         description="Inner Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        arc_span_degrees=widgets.IntSlider(value=defaults["arc_span_degrees"], min=0, max=360, step=5,
                                           description="Arc Span (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(value=defaults["rotation"], min=0, max=360, step=5,
                                   description="Rotation (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("outer_radius", "Outer Radius", "{:.2f}"),
            ("inner_radius", "Inner Radius", "{:.2f}"),
            ("arc_span_degrees", "Arc Span", "{}"),
            ("rotation", "Rotation", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "2D", defaults, param_list)

    save_button = widgets.Button(description="Save 2D Radial Segment Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_2d_barbell_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 2D barbell parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "barbell_length": 0.6,
            "sphere_radius": 0.2,
            "connector_thickness": 0.04,
            "rotation": 50,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "barbell_2d"
    plot_title = "Barbell 2D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "2D")

    def update(num_samples, barbell_length, sphere_radius, connector_thickness, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_barbell,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            barbell_length=barbell_length,
            sphere_radius=sphere_radius,
            connector_thickness=connector_thickness,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        barbell_length=widgets.FloatSlider(value=defaults["barbell_length"], min=0.1, max=0.8, step=0.05,
                                           description="Barbell Length", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        sphere_radius=widgets.FloatSlider(value=defaults["sphere_radius"], min=0.05, max=0.3, step=0.05,
                                          description="Sphere Radius", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH}),
        connector_thickness=widgets.FloatSlider(value=defaults["connector_thickness"], min=0.01, max=0.2, step=0.05,
                                                description="Connector Thickness",
                                                style={'description_width': DESCRIPTION_WIDTH},
                                                layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(value=defaults["rotation"], min=0, max=360, step=10,
                                   description="Rotation (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("barbell_length", "Barbell Length", "{:.2f}"),
            ("sphere_radius", "Sphere Radius", "{:.2f}"),
            ("connector_thickness", "Connector Thickness", "{:.2f}"),
            ("rotation", "Rotation", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "2D", defaults, param_list)

    save_button = widgets.Button(description="Save 2D Barbell Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_2d_sine_wave_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 2D sine wave parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "x_range": (0.1, 0.9),
            "vertical_offset": 0.5,
            "amplitude": 0.2,
            "frequency": 0.5,
            "thickness": 0.10,
            "rotation": 0,
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "sine_wave_2d"
    plot_title = "Sine Wave 2D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "2D")

    def update(num_samples, x_min, x_max, vertical_offset, amplitude, frequency,
               thickness, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_sine_wave,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            x_range=(x_min, x_max),
            vertical_offset=vertical_offset,
            amplitude=amplitude,
            frequency=frequency,
            thickness=thickness,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        x_min=widgets.FloatSlider(value=defaults["x_range"][0], min=0.0, max=0.5, step=0.05,
                                  description="X Min", style={'description_width': DESCRIPTION_WIDTH},
                                  layout={'width': SLIDER_WIDTH}),
        x_max=widgets.FloatSlider(value=defaults["x_range"][1], min=0.5, max=1.0, step=0.05,
                                  description="X Max", style={'description_width': DESCRIPTION_WIDTH},
                                  layout={'width': SLIDER_WIDTH}),
        vertical_offset=widgets.FloatSlider(value=defaults["vertical_offset"], min=0.0, max=1.0, step=0.05,
                                            description="Vertical Offset",
                                            style={'description_width': DESCRIPTION_WIDTH},
                                            layout={'width': SLIDER_WIDTH}),
        amplitude=widgets.FloatSlider(value=defaults["amplitude"], min=0.0, max=0.5, step=0.05,
                                      description="Amplitude", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        frequency=widgets.FloatSlider(value=defaults["frequency"], min=0.5, max=5.0, step=0.5,
                                      description="Frequency", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        thickness=widgets.FloatSlider(value=defaults["thickness"], min=0.01, max=0.2, step=0.05,
                                      description="Thickness", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(value=defaults["rotation"], min=0, max=360, step=5,
                                   description="Rotation (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("x_min", "X Min", "{:.2f}"),
            ("x_max", "X Max", "{:.2f}"),
            ("vertical_offset", "Vertical Offset", "{:.2f}"),
            ("amplitude", "Amplitude", "{:.2f}"),
            ("frequency", "Frequency", "{:.2f}"),
            ("thickness", "Thickness", "{:.2f}"),
            ("rotation", "Rotation", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "2D", defaults, param_list)

    save_button = widgets.Button(description="Save 2D Sine Wave Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_2d_star_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 2D star parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 5000,
            "num_points": 5,
            "star_size": 1.0,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "rotation": 0,
            "center": (0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "star_2d"
    plot_title = "Star 2D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "2D")

    def update(num_samples, num_points, star_size, outer_radius, inner_radius, rotation, noise_inside, noise_outside):
        return update_interface_2d(
            generate_function=generate_2d_star,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            num_points=num_points,
            star_size=star_size,
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            rotation=rotation,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        num_points=widgets.IntSlider(value=defaults["num_points"], min=3, max=10, step=1,
                                     description="Points", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        star_size=widgets.FloatSlider(value=defaults["star_size"], min=0.5, max=1.5, step=0.05,
                                      description="Size", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        outer_radius=widgets.FloatSlider(value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
                                         description="Outer Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        inner_radius=widgets.FloatSlider(value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
                                         description="Inner Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        rotation=widgets.IntSlider(value=defaults["rotation"], min=0, max=360, step=10,
                                   description="Rotation (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                   layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("num_points", "Points", "{}"),
            ("star_size", "Star Size", "{:.2f}"),
            ("outer_radius", "Outer Radius", "{:.2f}"),
            ("inner_radius", "Inner Radius", "{:.2f}"),
            ("rotation", "Rotation", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "2D", defaults, param_list)

    save_button = widgets.Button(description="Save 2D Star Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


# --------------------------------------------------------
# 3D Interface Creator Functions
# --------------------------------------------------------


def create_3d_radial_segment_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D radial segment parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "outer_radius": 0.4,
            "inner_radius": 0.2,
            "arc_span_degrees": 300,
            "rotation_x": 35,
            "rotation_y": 0,
            "rotation_z": 60,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "radial_segment_3d"
    plot_title = "Radial Segment 3D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "3D")

    def update(num_samples, outer_radius, inner_radius, arc_span_degrees,
               rotation_x, rotation_y, rotation_z, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_radial_segment,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            outer_radius=outer_radius,
            inner_radius=inner_radius,
            arc_span_degrees=arc_span_degrees,
            rotation_x=rotation_x,
            rotation_y=rotation_y,
            rotation_z=rotation_z,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        outer_radius=widgets.FloatSlider(value=defaults["outer_radius"], min=0.1, max=0.5, step=0.05,
                                         description="Outer Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        inner_radius=widgets.FloatSlider(value=defaults["inner_radius"], min=0.05, max=0.4, step=0.05,
                                         description="Inner Radius", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        arc_span_degrees=widgets.IntSlider(value=defaults["arc_span_degrees"], min=0, max=360, step=5,
                                           description="Arc Span (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        rotation_x=widgets.IntSlider(value=defaults["rotation_x"], min=0, max=360, step=5,
                                     description="Rotation X (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        rotation_y=widgets.IntSlider(value=defaults["rotation_y"], min=0, max=360, step=5,
                                     description="Rotation Y (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        rotation_z=widgets.IntSlider(value=defaults["rotation_z"], min=0, max=360, step=5,
                                     description="Rotation Z (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                     layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("outer_radius", "Outer Radius", "{:.2f}"),
            ("inner_radius", "Inner Radius", "{:.2f}"),
            ("arc_span_degrees", "Arc Span", "{}"),
            ("rotation_x", "Rotation X", "{}"),
            ("rotation_y", "Rotation Y", "{}"),
            ("rotation_z", "Rotation Z", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "3D", defaults, param_list)

    save_button = widgets.Button(description="Save 3D Radial Segment Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_3d_barbell_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D barbell parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "barbell_length": 0.8,
            "sphere_radius": 0.25,
            "connector_thickness": 0.1,
            "rotation_angle_x": 50,
            "rotation_angle_y": 50,
            "rotation_angle_z": 0,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "barbell_3d"
    plot_title = "Barbell 3D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "3D")

    def update(num_samples, barbell_length, sphere_radius, connector_thickness,
               rotation_angle_x, rotation_angle_y, rotation_angle_z, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_barbell,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            barbell_length=barbell_length,
            sphere_radius=sphere_radius,
            connector_thickness=connector_thickness,
            rotation_angle_x=rotation_angle_x,
            rotation_angle_y=rotation_angle_y,
            rotation_angle_z=rotation_angle_z,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        barbell_length=widgets.FloatSlider(value=defaults["barbell_length"], min=0.1, max=0.8, step=0.05,
                                           description="Barbell Length", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        sphere_radius=widgets.FloatSlider(value=defaults["sphere_radius"], min=0.05, max=0.3, step=0.05,
                                          description="Sphere Radius", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH}),
        connector_thickness=widgets.FloatSlider(value=defaults["connector_thickness"], min=0.01, max=0.2, step=0.05,
                                                description="Connector Thickness",
                                                style={'description_width': DESCRIPTION_WIDTH},
                                                layout={'width': SLIDER_WIDTH}),
        rotation_angle_x=widgets.IntSlider(value=defaults["rotation_angle_x"], min=0, max=360, step=10,
                                           description="Rotation X (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        rotation_angle_y=widgets.IntSlider(value=defaults["rotation_angle_y"], min=0, max=360, step=10,
                                           description="Rotation Y (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        rotation_angle_z=widgets.IntSlider(value=defaults["rotation_angle_z"], min=0, max=360, step=10,
                                           description="Rotation Z (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                           layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("barbell_length", "Barbell Length", "{:.2f}"),
            ("sphere_radius", "Sphere Radius", "{:.2f}"),
            ("connector_thickness", "Connector Thickness", "{:.2f}"),
            ("rotation_angle_x", "Rotation X", "{}"),
            ("rotation_angle_y", "Rotation Y", "{}"),
            ("rotation_angle_z", "Rotation Z", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "3D", defaults, param_list)

    save_button = widgets.Button(description="Save 3D Barbell Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])


def create_3d_saddle_interface(defaults=None, save_dir=None):
    """
    Creates an interactive widget for adjusting 3D saddle parameters.
    """
    if defaults is None:
        defaults = {
            "num_samples": 10000,
            "saddle_height": 0.5,
            "curve_sharpness_x": 1.0,
            "curve_sharpness_y": 1.0,
            "surface_thickness": 0.2,
            "rotate_x_deg": 0,
            "rotate_y_deg": 0,
            "rotate_z_deg": 0,
            "center": (0.5, 0.5, 0.5),
            "noise_inside": 0.0,
            "noise_outside": 0.0
        }
    base_name = "saddle_3d"
    plot_title = "Saddle 3D"
    defaults, _, output, suffix_widget = setup_interface(defaults, save_dir, base_name, "3D")

    def update(num_samples, saddle_height, curve_sharpness_x, curve_sharpness_y,
               surface_thickness, rotate_x_deg, rotate_y_deg, rotate_z_deg, noise_inside, noise_outside):
        return update_interface_3d(
            generate_function=generate_3d_saddle,
            plot_title=plot_title,
            output=output,
            num_samples=num_samples,
            center=defaults["center"],
            saddle_height=saddle_height,
            curve_sharpness_x=curve_sharpness_x,
            curve_sharpness_y=curve_sharpness_y,
            surface_thickness=surface_thickness,
            rotate_x_deg=rotate_x_deg,
            rotate_y_deg=rotate_y_deg,
            rotate_z_deg=rotate_z_deg,
            noise_inside=noise_inside,
            noise_outside=noise_outside
        )

    interactive_widget = widgets.interactive(
        update,
        num_samples=widgets.IntSlider(value=defaults["num_samples"], min=500, max=20000, step=500,
                                      description="Samples", style={'description_width': DESCRIPTION_WIDTH},
                                      layout={'width': SLIDER_WIDTH}),
        saddle_height=widgets.FloatSlider(value=defaults["saddle_height"], min=0.1, max=1.0, step=0.05,
                                          description="Height", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH}),
        curve_sharpness_x=widgets.FloatSlider(value=defaults["curve_sharpness_x"], min=0.1, max=2.0, step=0.1,
                                              description="Curve X", style={'description_width': DESCRIPTION_WIDTH},
                                              layout={'width': SLIDER_WIDTH}),
        curve_sharpness_y=widgets.FloatSlider(value=defaults["curve_sharpness_y"], min=0.1, max=2.0, step=0.1,
                                              description="Curve Y", style={'description_width': DESCRIPTION_WIDTH},
                                              layout={'width': SLIDER_WIDTH}),
        surface_thickness=widgets.FloatSlider(value=defaults["surface_thickness"], min=0.01, max=0.4, step=0.05,
                                              description="Thickness", style={'description_width': DESCRIPTION_WIDTH},
                                              layout={'width': SLIDER_WIDTH}),
        rotate_x_deg=widgets.IntSlider(value=defaults["rotate_x_deg"], min=0, max=360, step=10,
                                       description="Rotation X (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                       layout={'width': SLIDER_WIDTH}),
        rotate_y_deg=widgets.IntSlider(value=defaults["rotate_y_deg"], min=0, max=360, step=10,
                                       description="Rotation Y (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                       layout={'width': SLIDER_WIDTH}),
        rotate_z_deg=widgets.IntSlider(value=defaults["rotate_z_deg"], min=0, max=360, step=10,
                                       description="Rotation Z (Â°)", style={'description_width': DESCRIPTION_WIDTH},
                                       layout={'width': SLIDER_WIDTH}),
        noise_inside=widgets.FloatSlider(value=defaults["noise_inside"], min=0.0, max=0.5, step=0.05,
                                         description="Noise Inside", style={'description_width': DESCRIPTION_WIDTH},
                                         layout={'width': SLIDER_WIDTH}),
        noise_outside=widgets.FloatSlider(value=defaults["noise_outside"], min=0.0, max=0.5, step=0.05,
                                          description="Noise Outside", style={'description_width': DESCRIPTION_WIDTH},
                                          layout={'width': SLIDER_WIDTH})
    )

    def on_save_clicked(b):
        param_list = [
            ("num_samples", "Samples", "{:.0f}"),
            ("saddle_height", "Saddle Height", "{:.2f}"),
            ("curve_sharpness_x", "Curve Sharpness X", "{:.2f}"),
            ("curve_sharpness_y", "Curve Sharpness Y", "{:.2f}"),
            ("surface_thickness", "Surface Thickness", "{:.2f}"),
            ("rotate_x_deg", "Rotate X", "{}"),
            ("rotate_y_deg", "Rotate Y", "{}"),
            ("rotate_z_deg", "Rotate Z", "{}"),
            ("noise_inside", "Noise Inside", "{:.2f}"),
            ("noise_outside", "Noise Outside", "{:.2f}")
        ]
        suffix = suffix_widget.value.strip()
        if suffix:
            outer_folder = suffix
            file_prefix = f"{base_name}_{suffix}"
            current_save_dir = os.path.join(SHAPES_DIR, outer_folder, file_prefix)
        else:
            file_prefix = base_name
            current_save_dir = os.path.join(SHAPES_DIR, file_prefix)
        os.makedirs(current_save_dir, exist_ok=True)
        handle_save(interactive_widget, file_prefix, plot_title, current_save_dir, output, "3D", defaults, param_list)

    save_button = widgets.Button(description="Save 3D Saddle Data", button_style='success')
    save_button.on_click(on_save_clicked)
    return VBox([interactive_widget, suffix_widget, save_button, output])
